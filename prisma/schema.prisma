generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id             String         @id @default(uuid())
  name           String?        @default("")
  email          String         @unique
  username       String         @unique
  password       String?
  otp            String?
  otp_expiry     DateTime?
  email_verified Boolean        @default(false)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  auth_method    String?
  github_id      Int?
  emailResets    emailReset[]
  fly            fly[]
  refresh_token  refreshToken[]
}

model emailReset {
  id          String   @id @default(uuid())
  user        user     @relation(fields: [user_id], references: [id])
  user_id     String
  email       String
  created_at  DateTime @default(now())
  is_verified Boolean  @default(false)
}

model fly {
  id           String   @id @default(uuid())
  user         user     @relation(fields: [user_id], references: [id])
  user_id      String
  storage      BigInt   @default(2000000000)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  used_storage BigInt   @default(0)
  project_url  String
  public_key   String
  name         String
  files        file[]
  apikeys      apikey[]
  logs         log[]
}

model file {
  id               String   @id @default(uuid())
  name             String
  url              String
  parent_folder_id String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  type             String
  uploaded_via     String
  size             BigInt
  path             String
  fly              fly      @relation(fields: [fly_id], references: [id])
  fly_id           String
  date             String
}

model apikey {
  id         String            @id @default(uuid())
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  active     Boolean           @default(true)
  user_id    String
  fly        fly               @relation(fields: [fly_id], references: [id])
  fly_id     String
  permission apikey_permission
  key        String            @unique()
  name       String
}

model log {
  id            String     @id @default(uuid())
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  method        log_method
  endpoint      String
  status        Int
  response_body Json
  request_body  Json
  date          String
  fly           fly        @relation(fields: [fly_id], references: [id])
  fly_id        String     @default("")
  ip_address    String     @default("0.0.0.0")
}

enum log_method {
  post
  get
  delete
}

model refreshToken {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  user       user     @relation(fields: [user_id], references: [id])
  user_id    String
  token      String   @db.LongText
  expires_at DateTime
}

enum apikey_permission {
  upload
  full
}
